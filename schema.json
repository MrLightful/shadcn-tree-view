{
  "name": "tree-view",
  "type": "registry:block",
  "dependencies": [
    "@radix-ui/react-accordion",
    "class-variance-authority"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "components/tree-view.tsx",
      "type": "registry:block",
      "content": "'use client'\n\nimport React from 'react'\nimport * as AccordionPrimitive from '@radix-ui/react-accordion'\nimport { ChevronRight } from 'lucide-react'\nimport { cva } from 'class-variance-authority'\nimport { cn } from '@/lib/utils'\n\nconst treeVariants = cva(\n    'group hover:before:opacity-100 before:absolute before:rounded-lg before:left-0 px-2 before:w-full before:opacity-0 before:bg-accent/70 before:h-[2rem] before:-z-10'\n)\n\nconst selectedTreeVariants = cva(\n    'before:opacity-100 before:bg-accent/70 text-accent-foreground'\n)\n\ninterface TreeDataItem {\n    id: string\n    name: string\n    icon?: any\n    selectedIcon?: any\n    openIcon?: any\n    children?: TreeDataItem[]\n    actions?: React.ReactNode\n    onClick?: () => void\n}\n\ntype TreeProps = React.HTMLAttributes<HTMLDivElement> & {\n    data: TreeDataItem[] | TreeDataItem\n    initialSelectedItemId?: string\n    onSelectChange?: (item: TreeDataItem | undefined) => void\n    expandAll?: boolean\n    defaultNodeIcon?: any\n    defaultLeafIcon?: any\n}\n\nconst TreeView = React.forwardRef<HTMLDivElement, TreeProps>(\n    (\n        {\n            data,\n            initialSelectedItemId,\n            onSelectChange,\n            expandAll,\n            defaultLeafIcon,\n            defaultNodeIcon,\n            className,\n            ...props\n        },\n        ref\n    ) => {\n        const [selectedItemId, setSelectedItemId] = React.useState<\n            string | undefined\n        >(initialSelectedItemId)\n\n        const handleSelectChange = React.useCallback(\n            (item: TreeDataItem | undefined) => {\n                setSelectedItemId(item?.id)\n                if (onSelectChange) {\n                    onSelectChange(item)\n                }\n            },\n            [onSelectChange]\n        )\n\n        const expandedItemIds = React.useMemo(() => {\n            if (!initialSelectedItemId) {\n                return [] as string[]\n            }\n\n            const ids: string[] = []\n\n            function walkTreeItems(\n                items: TreeDataItem[] | TreeDataItem,\n                targetId: string\n            ) {\n                if (items instanceof Array) {\n                    for (let i = 0; i < items.length; i++) {\n                        ids.push(items[i]!.id)\n                        if (walkTreeItems(items[i]!, targetId) && !expandAll) {\n                            return true\n                        }\n                        if (!expandAll) ids.pop()\n                    }\n                } else if (!expandAll && items.id === targetId) {\n                    return true\n                } else if (items.children) {\n                    return walkTreeItems(items.children, targetId)\n                }\n            }\n\n            walkTreeItems(data, initialSelectedItemId)\n            return ids\n        }, [data, expandAll, initialSelectedItemId])\n\n        return (\n            <div className={cn('overflow-hidden relative p-2', className)}>\n                <TreeItem\n                    data={data}\n                    ref={ref}\n                    selectedItemId={selectedItemId}\n                    handleSelectChange={handleSelectChange}\n                    expandedItemIds={expandedItemIds}\n                    defaultLeafIcon={defaultLeafIcon}\n                    defaultNodeIcon={defaultNodeIcon}\n                    {...props}\n                />\n            </div>\n        )\n    }\n)\n\ntype TreeItemProps = TreeProps & {\n    selectedItemId?: string\n    handleSelectChange: (item: TreeDataItem | undefined) => void\n    expandedItemIds: string[]\n    defaultNodeIcon?: any\n    defaultLeafIcon?: any\n}\n\nconst TreeItem = React.forwardRef<HTMLDivElement, TreeItemProps>(\n    (\n        {\n            className,\n            data,\n            selectedItemId,\n            handleSelectChange,\n            expandedItemIds,\n            defaultNodeIcon,\n            defaultLeafIcon,\n            ...props\n        },\n        ref\n    ) => {\n        if (!(data instanceof Array)) {\n            data = [data]\n        }\n        return (\n            <div ref={ref} role=\"tree\" className={className} {...props}>\n                <ul>\n                    {data.map((item) => (\n                        <li key={item.id}>\n                            {item.children ? (\n                                <TreeNode\n                                    item={item}\n                                    selectedItemId={selectedItemId}\n                                    expandedItemIds={expandedItemIds}\n                                    handleSelectChange={handleSelectChange}\n                                    defaultNodeIcon={defaultNodeIcon}\n                                    defaultLeafIcon={defaultLeafIcon}\n                                />\n                            ) : (\n                                <TreeLeaf\n                                    item={item}\n                                    selectedItemId={selectedItemId}\n                                    handleSelectChange={handleSelectChange}\n                                    defaultLeafIcon={defaultLeafIcon}\n                                />\n                            )}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        )\n    }\n)\n\nconst TreeNode = ({\n    item,\n    handleSelectChange,\n    expandedItemIds,\n    selectedItemId,\n    defaultNodeIcon,\n    defaultLeafIcon\n}: {\n    item: TreeDataItem\n    handleSelectChange: (item: TreeDataItem | undefined) => void\n    expandedItemIds: string[]\n    selectedItemId?: string\n    defaultNodeIcon?: any\n    defaultLeafIcon?: any\n}) => {\n    const [value, setValue] = React.useState(\n        expandedItemIds.includes(item.id) ? [item.id] : []\n    )\n    return (\n        <AccordionPrimitive.Root\n            type=\"multiple\"\n            value={value}\n            onValueChange={(s) => setValue(s)}\n        >\n            <AccordionPrimitive.Item value={item.id}>\n                <AccordionTrigger\n                    className={cn(\n                        treeVariants(),\n                        selectedItemId === item.id && selectedTreeVariants()\n                    )}\n                    onClick={() => {\n                        handleSelectChange(item)\n                        item.onClick?.()\n                    }}\n                >\n                    <TreeIcon\n                        item={item}\n                        isSelected={selectedItemId === item.id}\n                        isOpen={value.includes(item.id)}\n                        default={defaultNodeIcon}\n                    />\n                    <span className=\"text-sm truncate\">{item.name}</span>\n                    <TreeActions isSelected={selectedItemId === item.id}>\n                        {item.actions}\n                    </TreeActions>\n                </AccordionTrigger>\n                <AccordionContent className=\"ml-4 pl-1 border-l\">\n                    <TreeItem\n                        data={item.children ? item.children : item}\n                        selectedItemId={selectedItemId}\n                        handleSelectChange={handleSelectChange}\n                        expandedItemIds={expandedItemIds}\n                        defaultLeafIcon={defaultLeafIcon}\n                        defaultNodeIcon={defaultNodeIcon}\n                    />\n                </AccordionContent>\n            </AccordionPrimitive.Item>\n        </AccordionPrimitive.Root>\n    )\n}\n\nconst TreeLeaf = React.forwardRef<\n    HTMLDivElement,\n    React.HTMLAttributes<HTMLDivElement> & {\n        item: TreeDataItem\n        selectedItemId?: string\n        handleSelectChange: (item: TreeDataItem | undefined) => void\n        defaultLeafIcon?: any\n    }\n>(\n    (\n        {\n            className,\n            item,\n            selectedItemId,\n            handleSelectChange,\n            defaultLeafIcon,\n            ...props\n        },\n        ref\n    ) => {\n        return (\n            <div\n                ref={ref}\n                className={cn(\n                    'ml-5 flex text-left items-center py-2 cursor-pointer before:right-1',\n                    treeVariants(),\n                    className,\n                    selectedItemId === item.id && selectedTreeVariants()\n                )}\n                onClick={() => {\n                    handleSelectChange(item)\n                    item.onClick?.()\n                }}\n                {...props}\n            >\n                <TreeIcon\n                    item={item}\n                    isSelected={selectedItemId === item.id}\n                    default={defaultLeafIcon}\n                />\n                <span className=\"flex-grow text-sm truncate\">{item.name}</span>\n                <TreeActions isSelected={selectedItemId === item.id}>\n                    {item.actions}\n                </TreeActions>\n            </div>\n        )\n    }\n)\n\nconst AccordionTrigger = React.forwardRef<\n    React.ElementRef<typeof AccordionPrimitive.Trigger>,\n    React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n    <AccordionPrimitive.Header>\n        <AccordionPrimitive.Trigger\n            ref={ref}\n            className={cn(\n                'flex flex-1 w-full items-center py-2 transition-all first:[&[data-state=open]>svg]:rotate-90',\n                className\n            )}\n            {...props}\n        >\n            <ChevronRight className=\"h-4 w-4 shrink-0 transition-transform duration-200 text-accent-foreground/50 mr-1\" />\n            {children}\n        </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n    React.ElementRef<typeof AccordionPrimitive.Content>,\n    React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n    <AccordionPrimitive.Content\n        ref={ref}\n        className={cn(\n            'overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down',\n            className\n        )}\n        {...props}\n    >\n        <div className=\"pb-1 pt-0\">{children}</div>\n    </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nconst TreeIcon = ({\n    item,\n    isOpen,\n    isSelected,\n    default: defaultIcon\n}: {\n    item: TreeDataItem\n    isOpen?: boolean\n    isSelected?: boolean\n    default?: any\n}) => {\n    let Icon = defaultIcon\n    if (isSelected && item.selectedIcon) {\n        Icon = item.selectedIcon\n    } else if (isOpen && item.openIcon) {\n        Icon = item.openIcon\n    } else if (item.icon) {\n        Icon = item.icon\n    }\n    return Icon ? (\n        <Icon className=\"h-4 w-4 shrink-0 mr-2\" />\n    ) : (\n        <></>\n    )\n}\n\nconst TreeActions = ({\n    children,\n    isSelected\n}: {\n    children: React.ReactNode\n    isSelected: boolean\n}) => {\n    return (\n        <div\n            className={cn(\n                isSelected ? 'block' : 'hidden',\n                'absolute right-3 group-hover:block'\n            )}\n        >\n            {children}\n        </div>\n    )\n}\n\nexport { TreeView, type TreeDataItem }\n"
    }
  ],
  "tailwind": {},
  "cssVars": {},
  "meta": {
    "importSpecifier": "TreeView",
    "moduleSpecifier": "@/components/tree-view"
  }
}